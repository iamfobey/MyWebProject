services:
  db:
    image: postgres:latest
    volumes:
      - ../services/dev/postgresql/data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: pg_isready --username "${POSTGRES_USER}" --dbname "${POSTGRES_DB}"
      interval: 1s
      retries: 3
      timeout: 5s
    networks:
      - app-network

  backend:
    image: cosmtrek/air:latest
    working_dir: /app/backend
    volumes:
      - ../backend:/app/backend:cached
      - /app/backend/tmp
    ports:
      - "8080:8080"
    environment:
      POSTGRES_HOST: db
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      USER_STORE_ADMIN_LOGIN: ${USER_STORE_ADMIN_LOGIN}
      USER_STORE_ADMIN_PASSWORD: ${USER_STORE_ADMIN_PASSWORD}
      JWT_KEY: ${JWT_KEY}
    depends_on:
      - db
    networks:
      - app-network

  frontend:
    image: node:18
    working_dir: /app/frontend/
    volumes:
      - ../frontend/:/app/frontend/
    command: npm run start
    ports:
      - "3000:3000"
    depends_on:
      - db
    networks:
      - app-network

networks:
  app-network:
    driver: bridge